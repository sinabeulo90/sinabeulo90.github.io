---
layout: post
title:  "ROS 파이썬 예제 코드 분석"
date:   2021-01-02 01:00:00 +0900
categories: "Grepp/KDT"
tags: ROS
---

[노드 통신을 위한 패키지 만들기]({% post_url Grepp/2020-12-22-kdt-ros07-practice %})의 `teacher.py`, `student.py` 예제 코드 분석


## teacher.py

{% highlight Python %}
#!/usr/bin/env python
"""
파일의 첫 중에 #!f로 시작되는 라인을 Shebang 라인이라고 한다.
- 스크립트 파일의 첫 줄에 사용되며, 해당 파일의 실행에 어떤 인터프리터를 사용할지 지정
- PATH 환경변수에서 가장 우선되는 인터프리터(python 바이너리)를 찾아 해당 스크립트 파일을 실행
- 파이썬 버전을 구분해서 지정할 수 있음
    - #!/usr/bin/env python2.6
    - #!/usr/bin/env python3
- Python에서 #로 시작되는 라인은 코멘트로 간주
- $ ./teacher.py 형식으로 직접 실행 가능
"""

import rospy
"""
rospy라는 라이브러리를 import해서 사용하겠다는 의미
import 키워드: 모듈, 패키지, 파이썬 표준 라이브러리 등을 가져온다.
    - 모듈: 특정기능을 python 파일 단위로 작성한 것
    - 패키지: 특정 기능과 관련된 여러 모듈을 묶은 것
    - Python 표준 라이브러리: Python에서 기본적으로 설치된 모듈과 패키지를 묶은 것
    - import로 모듈을 불러올 때, 사용자가 직접 별명(모듈 이름)을 설정 할 수 있음
        ex. import numpy as np: numpy 모듈을 np라는 이름으로 사용하겠다는 의미
rospy: ROS의 Python 클라이언트 라이브러리
    - 많은 노드들을 관리하고 통합하는 것은 ROS 프레임워크가 하는 일이고,
      그것을 Python으로 만든 것으로 ROS 프로그래밍을 할 때 필수적인 라이브러리
    - Python 프로그래머들이 빠르게 ROS Topics, Services, Parameter의 interface 사용 가능
    - 실행 속도 대신 구현의 편의성에 더 초점이 맞춰져 있기 때문에, 빠르게 Prototype을 만들 수 있음

"""

from std_msgs.msg import String
"""
std_msgs.msg라는 모듈에서 String 관련 부분만 사용하겠다는 의미
from ... import ... 키워드: 모듈의 일부를 가져온다.
    - from 뒤에 모듈 이름을 지정하고, import 뒤에 가져올 변수, 함수, 클래스를 입력
    - import 뒤에 여러 개를 넣을 수 있음
"""

rospy.init_node('teacher')
"""
해당 노드를 초기화하고 노드의 이름을 'teacher'로 지정
rospy에서 기본적인 함수이며, 이 함수를 사용하여 생성된 노드는 다른 노드와 통신하면서 topic을 주고 받을 수 있음
ROS 시스템 상에서 노드들이 topic을 주고 받기 위해서, 노드에 고유의 이름을 할당해야 함
    - 노드의 이름에는 '/'(slash)와 같은 namespaces를 포함할 수 없다.
    - 중복되는 노드 이름이 생성될 경우, 이전 노드는 기능이 멈추고 새로운 노드가 새로 동작함
def init_node(
    name,               # (str) Node의 이름
    argv=None,          # ([str]) 사용자가 지정한 argument를 넘겨받을 때 사용
    anonymous=False,    # True일 경우, 노드의 이름 자동으로 생성, name 뒤에 임의의 숫자를 붙임
                        # 실제 이름은 신경쓰지 않고, 사용자가 같은 노드의 instance를 여러개 생성할 때 유용
    log_level=None,     # (int) default: INFO 레벨
                        # rospy.DEBUG, rospy.INFO, rospy.ERROR, rospy.WARN, rospy.FATAL 등 사용 가능
    disable_rostime=False,  # 내부적인 테스트에서 사용
    disable_rosout=False,   # 내부적인 테스트에서 사용
    disable_signals=False,  # True일 경우, rospy는 사용자의 signal handler를 등록하지 않음
                            # 사용자가 main thread로부터 init_node를 call하지 않거나,
                            # 또는 사용자가 자신만의 signal handling을 설정해야 하는 환경에서
                            # rospy를 사용할 때 이 flag를 설정해야 한다.
    xmlrpc_port=0,      # client XMLRPC node에 대한 포트 번호
    tcpros_port=0       # TCPROS server가 통신하는 포트 번호
)
"""

pub = rospy.Publisher('my_topic', String)
"""
'my_topic'이라는 이름의 토픽을 발행하겠다고 ROS 시스템에 Publisher로 등록
'my_topic' 토픽에 담는 메시지 데이터 타입은 'std_msgs.msg' 모듈의 String으로 지정
pub.publish('call me please'): String 타입의 메시지를 담아서 'my_topic' 토픽을 발행하는 코드
Publisher는 보통 센서 데이터를 일정한 주기로 끊임없이 발행한다.
    - ex. 카메라 영상, 라이다 스캔 정보
"""

rate = rospy.Rate(2)
"""
1초에 2번 loop를 반복할 수 있도록 rate라는 객체를 생성
    - 0.5초에 한 번씩 루프를 돌아야 한다는 의미
    - 0.5초 간격의 time slot을 만들고, loop 안에서 할당된 time slot 시간을 모두 소모한 뒤 다시 loop를 반복
"""

while not rospy.is_shutdown():
"""
rospy.is_shutdown()이 True가 될 때 까지 while loop를 반복하겠다는 의미
rospy.is_shutdown()
    - rospy 내부의 shutdown_flag 검사
    - ROS 시스템이 shutdown 되었는지 여부를 검사하는 함수
    - <CTRL+C> 또는 다른 방법으로 프로그램이 종료될 경우 True
"""
    pub.publish('call me please')
    """
    pub: 'my_topic' 토픽을 발행하기 위해 만든 Publisher instance
    publish() 함수: 토픽에 데이터를 담아서 발행하는 기능을 수행
        - ROSException: 
            rospy 노드가 initialization되지 않을 때 발생
            init_node 함수로 이름을 할당하여 해결함
        - ROSSerializationException:
            message를 serialize 할 수 없을 때 발생
            보통 type error일 때가 많음
    """
    rate.sleep()
    """
    rate: rospy.Rate(2)에서 만들어진 instance
    - rate.sleep()는 while loop 안에서 호출되어 0.5초마다 (1초에 2번) pub.publish()가 실행
    """
{% endhighlight %}



## student.py

{% highlight Python %}
#!/usr/bin/env python
import rospy
from std_msgs.msg import String

def callback(msg):
"""
'callback' 이라는 이름의 함수를 정의
def 키워드: Python에서 함수를 정의할 때 사용
    - 'def function_name(parameter):' 로 함수를 선언한 뒤, 밑에 함수에 대한 코드를 작성
    - 함수를 선언한 뒤, 'function_name(parameter)' 코드로 함수를 호출
    - 함수 호출하는 코드 위에서 함수를 정의해야 함.
      함수 호출 코드 밑에 함수를 정의할 경우, 정의되지 않은 함수를 호출하였다고 에러가 발생
"""
    print msg.data
    """
    msg.data를 화면에 출력하는 코드
    print() 함수: Python의 기본적인 함수로써 사용자가 콘솔 화면에 어떤 값을 출력할 수 있도록 해준다.
    rospy는 공식적으로 python2 버전을 사용하므로, print 문을 사용할 때 괄호를 사용하지 않는다.
    화면 출력 작업 시 object들이 내부적으로 string으로 바꿔주므로 변수를 넣어도 string으로 변환되어 출력된다.
    """

rospy.init_node('student')
"""
해당 노드를 초기화하고 노드의 이름을 'student'로 지정
"""

sub = rospy.Subscriber('my_topic', String, callback)
"""
이번에 만든 노드는 'my_topic'이라는 이름의 토픽을 받는 Subscriber임을 선언
'my_topic' 토픽 안에 담긴 데이터는 String 타입이고,
토픽이 도착할 때마다 이전에 미리 정의된 'callback'함수를 실행시킬 것을 ROS 시스템에 요청
즉, 토픽(메시지)을 받을 때 마다 callback 함수가 한 번씩 호출
"""

rospy.spin()
"""
rospy.spin(): ROS 노드가 shutdown될 때까지 Block하는 함수이며
    - shutdown signal을 받을 때까지 무한루프
    - topic을 받거나 time triggering과 같은 이벤트가 발생할 경우 callback 함수가 호출되고, 그 외에는 sleep 상태가 됨
    - 사용자의 노드가 callback 외의 어떤 일도 하지 않을 경우 사용
rospy.sleep(): rospy.spin과 비슷한 일을 하지만, 특정 시간 동안에만 sleep 상태 유지
"""
{% endhighlight %}



## 동작 결과

`teacher` 노드가 `my_topic` 이름의 topic에 "call me please" 문자열을 담아 보내면, `student` 노드가 해당 topic을 받아 그 안에 담긴 문자열을 꺼내 화면에 출력한다.