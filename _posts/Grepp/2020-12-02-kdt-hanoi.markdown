---
layout: post
title:  "하노이 탑"
date:   2020-12-02 00:00:00 +0900
categories: "Grepp/KDT"
tags: Python
---

재귀 호출을 배우는 사람들이라면 한번 씩 "하노이의 탑(Tower of Hanoi)"에 대해 접했을 것입니다. 하노이 탑은 아래 2가지 조건을 만족시키면서 세 개의 기둥 중 한 기둥에 꽂힌 원판들을 다른 한 기둥으로 옮기는 퍼즐을 말합니다.

1. 한 번에 하나의 원판만 옮길 수 있다.
2. 큰 원판이 작은 원판 위에 있어서는 안 된다.

이 문제를 풀 때, 위 규칙에서 발생하는 모든 가능성에 대해 고려한다는 생각을 버리고 재귀적인 방법을 생각했을 때 이해가 쉬웠습니다. 보통 점화식을 생각해보면, 현재 상태를 얻기 위해서 이전 상태들만 기억하면 된다는 것을 알수 있듯이, 하노이의 탑 또한 원하는 상태를 만들기 위해 이전에는 어떤 상태여야 할지에 대해서만 생각하고 접근하는 것이 편했습니다.

A 기둥에 있는 원판들을 모두 C 기둥으로 옮긴다고 생각해봅시다.

![hanoi 0](/assets/grepp/hanoi_0.png)

일단 우리는 원반을 옮긴다는 것만을 생각하고, 어떻게 옮겼을 것인지를 생각하는 대신 어떤 상태를 거쳐야만 하는지만 생각합니다.

![hanoi 1](/assets/grepp/hanoi_1.png)

A 기둥에서 C 기둥으로 모든 원판을 옮기기 위해서는 [규칙 2]에 의해서 반드시 A기둥의 5번 원반이 C 기둥의 처음으로 옮겨져야하므로, 아래와 같이 될 것입니다.

![hanoi 2](/assets/grepp/hanoi_2.png)

그리고 다시 1~4번 원반이 처음에 A 기둥에서 B 기둥으로 어떻게 옮겨진 것인는 모르겠지만, B에서 C로 옮겨지기만 하면 될 것입니다.

![hanoi 3](/assets/grepp/hanoi_3.png)

이 과정을 그대로 코드로 옮기면 아래와 같습니다.

{% highlight Python linenos %}

# 하노이의 탑에서 원반을 옮기는 알고리즘
# source(A)기둥에 num개 원반을 destination(C)기둥으로 옮기는 방법 출력
def hanoiOfTower(num, source, auxiliary, destination):
    # 원반의 갯수가 1개라면,
    # source(A) 기둥에서 destination(C)기둥으로 옮긴다.
    if num == 1:
        print("{} -> {}".format(source, destination))
        return
    
    # num-1개 원반을 source(A)기둥에서 auxiliary(B)기둥으로 옮긴다.
    hanoiOfTower(num - 1, source, destination, auxiliary)
    # 그리고 source(A)기둥에 있는 마지막 원반을 destination(C)기둥으로 옮기고, 
    print("{} -> {}".format(source, destination))
    # auxiliary(B)기둥에 있던 num-1개 원반을 destination(C)기둥으로 옮긴다.
    hanoiOfTower(num - 1, auxiliary, source, destination)


if __name__ == "__main__":
    hanoiOfTower(5, "A", "B", "C")

# 출력 결과
# A -> C
# A -> B
# C -> B
# A -> C
# B -> A
# B -> C
# A -> C
{% endhighlight %}

코드의 8번째, 15번째 라인에서 `source`, `auxiliary`, `destination`가 들어가는 위치에 대해서 햇갈릴 수 있는데, 몇 개의 원반을 어디에서 어디로 옮겨야 하는가에 초점을 맞추면서, `source`, `destination` 2개 인자만 출력에 사용된다는 것을 이해하면 혼란을 줄일 수 있을 것 같습니다.


-----


참고 사이트:
- [Khan Academy - 하노이의 탑에서 세 개의 원반 옮기기](https://ko.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/e/move-three-disks-in-towers-of-hanoi)
- [Seo Younggi - 하노이탑 알고리즘](https://brunch.co.kr/@younggiseo/139)
