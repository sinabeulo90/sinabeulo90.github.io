---
layout: post
title:  "Xycar 자율주행 미션 소개"
date:   2021-01-05 02:00:00 +0900
categories:
    - "Grepp/KDT"
tags:
    - Xycar
---

## 카메라 영상을 기반으로 차선 따라 주행

1. OpenCV 기반의 영상 처리를 통해 전체 이미지에서 차선의 위치를 파악
- ex. Grayscale 변환 --> 이진화 변환 --> 차선 찾기

2. 허프변환을 이용한 차선 추출
- ex. Grayscale --> Blur --> Canny edge --> ROI --> hough transform

3. 머신러닝 모델 적용
- ex. 딥러닝 모델 ENet: Real-Time Semantic Segmentation

4. 차선과 차선의 중점과 화면의 중앙을 비교하여 직진/곡선 차선 주행



## 정지선/횡단보도 인식

- 화면 하단에 ROI 영역을 설정하여, 하얀색 픽셀이 많거나 수평선이면 정지선으로 인식
- 화면 하단에 ROI 영역을 설정하여, OpenCV 함수로 도형의 갯수를 알아내어 여러 개면 횡단보도, 한 개면 정지선으로 인식
- 정답이 있는 것은 아니다.



## 신호등 인식

- 화면 상단에 ROI 영역을 설정하여 연속된 동그라미를 찾거나 YOLO 오브젝트 인식으로 찾는다.
- 영상처리에서 Color 색상으로 판단하는 것은 위험하기 때문에, 색상보다 명도(밝기)로 신호등 상태 정보를 획득한다.



## 언덕 구간

- 영상이 볼록한 항아리 모양으로 차선이 왜곡 되므로, 한쪽 차선만 보고 가면 곡선 차선으로 인식될 수 있기 때문에 양쪽 차선을 모두 봐야한다.
- IMU 센서로 언덕 주행을 인식 할 수 있다.



## 돌발 장애물

- 라이다가 0 ~ 360도로 1도 단위로 거리를 센싱하여, 장애물의 (x, y)좌표를 알아낸다.
- 진행 방향에 장애물이 있으면 정지한다.



## 로터리 진입/진출

- 좌측에서 다가오는 차량을 확인하고, 가까우면 지나갈 때까지 기다린다. 가까이에 없으면 출발한다.
- 우측에서 멀어지는 차량을 확인하여, 가까우면 멀어질 때까지 기다린다. 가까이에 없으면 출발한다.



## 차선 변경

- 3개 차선 중 장애물을 감지하여, 장애물이 없는 차선을 선택하여 주행한다.
- 직진, 왼쪽, 오른쪽 차선을 선택하여 주행한다.



## QR 코드

- 지금 어떤 미션을 수행해야 하는지를 알려줘서, 해당 미션에 필요한 알고리즘 코드를 실행하도록 한다.
- 성능 문제로 많은 기능의 동시 구동이 어렵고, 그럴 필요도 없기 때문에 신호 표지판을 이용하여 효율을 높인다.
- 항상 동작해야 하는 코드
    - 차선 인식 및 주행
    - 정지선 인식, 차량 멈춤 및 재출발
    - 거리 센서 기반의 장애물 감지
- 지금 어떤 상황인지 스스로 상황 인식을 할 수 있는 방법은 없을까?
    - ex. 머신러닝(딥러닝) 기반 인지 기능 적용 가능성
