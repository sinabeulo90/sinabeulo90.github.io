---
layout: post
title:  "원근 변환과 슬라이딩 윈도우"
date:   2021-01-26 01:00:00 +0900
categories: "Grepp/KDT"
tag: OpenCV
plugins: mathjax
---

## 원근 변환, Perspective Transform

원근법을 적용한 변환으로, 직선의 성질만 유지되고 선의 평행성은 유지가 되지 않는 변환이다. 기차길은 서로 평행하지만, 3차원에선 원근 현상 때문에 평행성은 유지되지 못하고 하나의 점에서 만나는 것처럼 보인다. 이를 원근 변환을 통해 원근 현상을 제거하여 선로 추출 사용할 수 있다.



## 원근 변환과 슬라이딩 윈도우를 이용한 차선 찾기

[카메라 이미지 속 차선 찾기 프로젝트](https://chatbotslife.com/self-driving-cars-advanced-computer-vision-with-opencv-finding-lane-lines-488a411b2c3d)의 내용에 따르면, 아래와 같은 단계를 통해 차선을 검출한다.

1. Camera Calibration
2. Bird's eye View
3. 이미지 임계값 및 이진 이미지
4. 슬라이딩 윈도우로 차선 위치 파악
5. 파악된 차선 위치를 원본 이미지에 표시



### Camera Calibration, 카메라 보정

카메라는 곡면 렌즈를 사용해서 이미지를 형성하는데, 이로 인해 가장자리가 왜곡되어 보이게 된다. 이 왜곡으로 인해 물체의 크기, 모양이 변경이 될 수 있고, 시야의 위치에 따라 다른 형상으로 표시될 수 있다. 또한 실제보다 더 가깝거나 멀게 보일 수도 있다.

이미지의 왜곡은 카메라의 다양한 내부적 요인들로 인해 발생하는데, 렌즈, 렌즈-이미지 센서와의 거리, 렌즈와 이미지 센서가 이루는 각도로 인해 발생할 수 있다. 이런 왜곡 지점을 왜곡되지 않는 지점으로 Mapping하여 실제 우리 눈에 보이는 것과 같이 보정하는 것을 Camera Calibration 한다.

Camera Calibration을 위해서 **체스판 이미지**를 사용하는데, 이 이미지는 규칙적이고 대비와 패턴이 강하기 때문에 에러 감지에 용이하기 때문이다.



#### Camera Calibration의 단계

- 자동으로 체스판을 찾아서 패턴 매핑
    - `findChessboardCorners()`: 체스판의 코너들을 찾음
    - `drawChessboardCorners()`: 찾은 체스판의 코너들을 그림
- 교정 및 undistortion 계산
    - `cv2.calibrateCamera()`: camera matrix, 왜곡 계수, 회전 변환 벡터들을 반환
    - `cv2.undistort()`: 이미지를 펴서 왜곡이 없어지도록 보정



### Bird's-eye View, 하향식 보기

새가 하늘에서 내려다보는 듯한 구도로, 위에서 아래를 내려다보는 방식을 말한다. 원근 현상이 있는 도로 이미지에서는 차선의 곡률을 파악하기가 쉽지 않기 때문에, 하향식 보기로 변환하면 선의 곡률을 측정할 수 있다.

1. 원근 변환 행렬 계산: `cv2.getPerspectiveTransform(src, dst)`
    - Original Image ---> Warped Image
2. 역 원근 변환 행렬 계산: `cv2.getPerspectiveTransform(dst, src)`
    - Warped Image ---> Original Image
3. 마지막으로 원근 변환을 사용하여 이미지를 뒤틂: `cv2.warpPerspective(img, M, img_size, flags=cv2.INTER_LINEAR)`
    - 앞서 계산한 원근 변환 행렬을 사용해서 이미지를 뒤털어 원하는 구도로 변환

그럼 원근 변환을 위한 4개의 점은 어떻게 식별할까? 도로가 평면이라는 가정하에, 위에서 도로를 내려다볼 때의 직사각형을 나타내는 **사다리꼴 모양의 4개 점**을 선택한다. 가장자리 또는 모서리 감지를 통해 이미지에서 4개 점을 감지하고 색상 및 속성을 분석해서 선택한다(이동 전 4개의 점). 그리고 선택한 4개의 점을 적절하게 직사각형으로 정렬한다(이동 후 4개의 점). 만약 정렬이 올바르게 되지 않고 Warping을 하면 이미지가 엉켜서 출력될 수 있다.

ex. 최종 사다리꼴 비율 및 차량 후드 자르기
- bottom_width = 0.4(40cm)
- top_width = 0.092(9.2cm)
- height = 0.4(40cm)
- car_hood = 45 (자동차 후드 제거를 위해 하단에 잘라낸 픽셀 수)
- **각자 상황에 맞게 조절**



### 이미지 임계값, 이진 이미지

차선이 명확하게 보이는 이미지를 생성하기 위해, 색상 임계값을 조절한다. 차선에는 흰색, 노란색이 있으므로 각 색상에 맞게 임계값을 조절해서 마스킹을 한다.

그 후 Grayscale로 변환하여 이진 이미지를 생성한다.

- HSV
    - H: 색조, S: 채도, V: 명도
    - 명도가 낮을 수록 검은색
    - 명도가 높고 채도가 낮을 수록 흰색
- LAB
    - 사람 눈이 감지할 수 있는 색차와 색공간에서 수치로 표현한 색차를 거의 일치시킬 수 있는 색공간
    - L: 밝기, A: Red/Green 값, B: Yellow/Blue 값
    - **노란색 차선을 인식할 때, B를 사용하면 좋은 성능을 냄**
- HLS
    - 색상 균형, HSV의 V(명도)를 L(밝기)로 바꾼 것
    - H: 색조, L: 밝기, S: 채도
    - 밝기가 낮을 수록 검은색, 밝기가 높을 수록 흰색
    - **흰색 차선을 인식할 때 L을 사용하면 좋은 성능을 냄**


### 차선 식별

도로 이미지에 보정, 임계값 및 원근 변화를 적용하면, 차선이 두드러지는 이진 이미지를 얻을 수 있다. 이 이진 이미지에서 어떤 픽셀이 라인의 일부이고, 왼쪽/오른쪽 라인을 결정해야 하는데, 이때 히스토그램을 사용할 수 있다.

각 열에 따라 픽셀 개수를 더한 히스토그램에서 **가장 눈에 띄는 두 개의 peak**를 볼 수 있는데, 이 peak를 통해 차선의 x위치를 파악할 수 있다.



### 슬라이딩 윈도우

선 중심의 주변에 배치된 윈도우를 이용하면, 프레임 상단까지 선을 찾아 따라갈 수 있다. 슬라이딩 윈도우는 한 윈도우 안에서 감지되는 **선의 중심을 기준**으로 계속해서 윈도우를 쌓아가면서 선을 탐색하는 방법을 말한다.

차선 탐색을 시작하는 처음은 앞선 히스토그램의 두 개의 peak로 정의되고, 각 윈도우는 이미지 아래쪽에서 위쪽으로 탐색하면서 올라간다.

윈도우가 여러 개 쌓이게 되면 그 중심을 연결해서 선을 그릴 수 있는데, `Polyfit`함수를 사용하면 $ay^2 + by + c = x$ 2차함수로 표현할 수 있다. 이 2차 함수의 $a$, $b$, $c$를 통해서 해당 차선을 그릴 수 있게 된다.
