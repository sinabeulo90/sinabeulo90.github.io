---
layout: post
title:  "[테스트] 차선 인식 - ver 0.2"
date:   2021-02-22 02:00:00 +0900
category: "Grepp/KDT"
tags:
    - "Image Processing"
    - "Testbed"
---

<iframe width="740" height="692" src="https://www.youtube.com/embed/nJmiPQlSb28" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


## 적용 기술
- Sliding Window Tuning
- Least-squares using cauchy loss


## 작업 기록 및 느낀점
- Sliding Window Tuning
        - [x] 영상의 하단부터 시작되는 차선을 찾지 못할 때, 가장자리 하단부터 시작되는 차선 검출 시도
        - [x] 검출된 점들에 가장 잘 맞는 3차함수 구하기
    - 본래의 sliding window는 영상의 histogram의 peak를 x의 시작점으로 삼고, 영상 하단에서 상단으로 윈도우가 겹쳐지지 않고 층층이 쌓아가는 방식이지만, 여기서는 조금 다르게 적용하였다.
        1. Histogram에서 peak를 구하는 ROI를 하단에서 윈도우의 높이만큼만 찾아낸다.
        2. Histogram에서 찾아낸 peak을 왼쪽/오른쪽 한 개씩만 찾지 않고, 연속되는 점들의 평균을 시작점으로 삼는다. 이때 갯수는 상관하지 않는다.

        | histogram | 1 | 2 | 1 | 0 | 1 | 0 | 0 | 1 | 2 | 1 | 0 | 1 |
        | peak      |   | x |   |   | x |   |   |   | x |   |   | x |

        {:start="3"}
        3. 윈도우를 슬라이딩 시킬 때, 윈도우의 절반만 위로 이동시켜 이전 윈도우와 중복되는 것을 허용한다.
        4. 이때, 윈도우 내에 있는 nonzero 픽셀이 일정 갯수 이상이 되어야만 이동이 가능하다. 일정 갯수 미만일 경우 슬라이딩을 멈춘다.
    - 이 방식으로 찾을 수 있는 점들을 최대로 찾으려 했지만, 연산에 너무 많은 비용이 있었기 때문에 DP를 활용하였다.
    - 그리고 검출된 점들을 polifit, RANSAC을 적용하여 2차, 3차 다항식을 구하여 차선을 그렸으나, 차선이 아닌 점(노이즈)의 영향으로 차선이 매우 흔들리게 그려졌다.
    - 그래서 노이즈를 줄이고, 최대한 확실한 점들을 검출하기 위해 아래와 같은 방법을 사용했다.
        1. 화면 전체에서 검출되는 점들을 모두 찾으려는 대신, 한개 차선에 최대 30개의 점들만 검출한다. (윈도우의 크기에 따라 달라짐)
        2. 점이 30개인 묶음은 여러개가 발생할 수 있으므로, 화면 중앙부터 바깥으로 검출을 진행한다.
            - binary 이미지의 중앙 하단은 차선이 있을 가능성이 적기 때문에, 최대 30개의 점들을 검출될 가능성도 적을 것이기 때문이다.
            - 중앙부터 가장자리로 가는 동안 첫 30개의 점들이 검출된다면, 그 점들의 묶음은 실제 차선이 될 가능성이 높다고 생각했다.
        3. 만약 30개의 차선을 검출하지 못하더라도, 검출된 차선의 묶음 중 15개의 점 묶음을 차선이라고 가정한다.
    - 그런 다음 Least-squares을 적용하고 난 다음에서야, 꽤 괜찮은 차선을 얻을 수 있었다.
- Least-squares using cauchy loss
    - nonlinear least-squares 문제를 푸는데 사용된다고 적혀있었는데, Cauchy Loss function도 처음 알았다. 머신러닝에서 보고 배운 것들이 있어서인지, 어찌저찌 적용하였다.
    - 검출된 점들의 갯수가 적어도, 차선에 일치하기만 해도 어느정도는 비슷한 차선을 그릴 수 있었다.
    - 검출된 점들은 영상 하단부의 정확한 차선을 표현하기 때문에, 차선의 형태를 2차 다항식으로 표현하고 점들의 최적화 되는 계수들을 찾아 내었다. 다른 형태의 함수을 찾아낸다면, 좀더 부드러운 차선을 그릴 수 있을 것으로 보인다.
- 느낀점
    - 개선해야 했던 점들은 모두 해결했다. 어느정도 만족스러운 결과를 나타내었다. 발생한 이슈에 대해 해결책을 생각해보고, 생각했던 그대로 구현해서 바로 결과로 확인하는 재미가 이런 건가 알 것 같았다. (~~덕분에 과제 제출을 못했지만..~~)
    - 이제 시계열로 얻어지는 데이터에 대해 Filter를 적용하여 노이즈를 걸러내면, 영상에서 모터 제어로 전달할 수 있는 데이터는 준비가 될 것 같다.
    - 이번 주차에는 강화학습에 대해 공부하는데, 초음파센서와 차선 정보, 시뮬레이터를 사용하면 지도를 만들 수는 방법이 있지 않을까?



## 개선 사항 및 작업 계획
- Calibration: calibration을 적용한 영상의 좌측 영역에 약간의 왜곡이 있었기 때문에, calibration 다시 수행
- LPF 공부 및 적용


## 머리에 맴 도는 문제
- Camera
    - Exposure를 약간 낮춘다면, 빛 반사 간섭을 조금 약화시킬 수 있을까?
- Sliding window
    - Sobel을 활용하면 영상처리 비용이 적게 든다는 글을 보았는데, 가로/세로/대각선 kernel을 적용한 edge 결과에서 & 연산으로 교점들을 활용할 수 있을까?
- Filter
    - Sliding Window에서 검출된 정보의 오차를 걸러내기 위해서도 필요하고, 앞으로도 계속 필요할 것 같음
    - 강화학습을 적용하던, 초음파를 적용하던 반드시 사용해야 할 문제라고 점점 확신이 들고 있음
    - 영상의 하단부터 시작되는 차선을 찾았지만, 차선의 흐름이 급격한 경우에 대한 문제
        - ex. 하단에서 찾은 차선 시작점부터 왼쪽으로 검출되다가, 감자기 오른쪽으로 검출되는 경우 존재
        - 왼쪽으로 검출되는 차선과 오른쪽으로 검출되는 차선을 분리하고, 하단부터 시작되는 추세를 가진 차선만 추출할 수 있을까?
    - Least-squares using cauchy loss
        - 만약 시계열의 차선 계수값과 차선 형태의 연관성이 있을까?
            - 만약 연관성이 있다면, 항상 일정한 초기 계수값에서 시작하지 않고 Filter이 적용된 계수값을 사용하면 최적 계수를 찾기 위한 연산량을 줄일 수 있지 않을까?
        

