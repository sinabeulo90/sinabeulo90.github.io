---
layout: post
title:  "[Day 1.1] ROS의 구조와 기능 소개"
date:   2020-12-21 01:00:00 +0900
categories:
    - "K-Digital Training"
    - "자율주행 데브코스"
---

## ROS의 구조와 기능 소개

### 1 [ROS (Robot Operating System)](https://www.ros.org)
- 오픈소스 로봇 운영체제
- 로봇 소프트웨어를 개발하는 데 필요한 소프트웨어 프레임워크(Software Framework)
- 메타 운영 체제(Meta OS): 운영 체제 위에서 기초적인 여러가지 지원 기능을 갖춘 OS 또는 미들웨어(Middleware)
- 소프트웨어 모듈 + 라이브러리 집합 + 도구 집합

### 2 ROS는 자동차(로봇의 일종) 제어를 위한 미들웨어
- 각종 센서와 모터를 ROS에 부탁하여 정보를 취득하므로, 프로그래머가 하드웨어를 편하게 사용할 수 있도록 함
- ex. 리눅스 ⇋ ROS(미들웨어) ⇋ 자율주행 소프트웨어

### 3 ROS 구성도
![COROS Software Architecture](/assets/k-digital-training/coros_software_architecture.png)

### 4 ROS의 특징
- 로봇 소프트웨어를 만들기 위한 코드의 재사용이 용이한 환경제공이 목표
    - 다양한 프로그래밍 언어를 지원 (C++, Python, ...)
    - 표준화된 ROS 인터페이스를 따르는 하드웨어와 소프트웨어를 편하게 엮을 수 있음
    - 하드웨어 부품과 소프트웨어 부품을 조립하여 여러가지 응용 구성 가능
    - 대규모 실행 시스템 및 프로세스에도 적용 가능
- 다양한 도구들을 함께 제공
    - RVIZ, RQT, Gazebo, ...
- 다양한 OS 한경에서 통일된 방법으로 상호작용을 구현하는 것이 가능
    - 표준화된 통신 프로토콜을 따르면, 서로 다른 기종간의 메시지 교환이 가능
    - Linux, OS X, Windows, Raspberry Pi OS, QNX, RTOS, Android, iOS 등

### 5 ROS가 제공하는 도구들
- RVIZ
    - 센서 데이터를 비롯한 주변환경 변화를 시각화해주는 도구
- RQT
    - Qt 기반의 GUI 응용 개발 도구
    - 노드연결 정보를 그래프로 표현
    - 사용자 상호작용을 UI를 갖춘 응용 개발에 이용
 - GAZEBO
    - 물리 엔진 기반의 3차원 시뮬레이터
    - 시뮬레이터 제작 및 모델링에 이용

### 6 ROS 배포판
- **ROS Kinetic Kame : May 23rd, 2016 - April 2021**: 실습에 사용할 ROS 버전
- ROS Melodic Morenia : May 23rd, 2018 - May 2023

### 7 ROS의 통신
- 토픽의 **발행**과 **구독** 기반의 메시지 교환
    - 발행(Publish): 노드(Node) ---> 토픽(Topic)
    - 구독(Subscribe): 토픽(Topic) ---> 노드(Node)
- ex. 레이저 스캐너(Node: Python) --- 발행(publish) ---> Laser Data(Topic) --- 구독(subscribe) ---> 지도 생성(Node: C++)
- 노드(Node) ≈ 프로세스
- 토픽(Topic) ≈ 메시지
- 서로 다른 기종간의 메시지 교환의 예
![ROS Standard](/assets/k-digital-training/ros_standard.png)

### 8 ROS 핵심 기능
- 노드간 통신을 기반으로 전체 시스템을 구동시킴
- 하드웨어 부품 또는 소프트웨어 모듈 각각에 노드가 하나씩 할당된다.
- 노드는 OS의 도움을 받아 하드웨어 장치들을 제어하고, **마스터**의 도움을 받아 노드들간에 서로 메시지를 주고 받는다.
- 마스터(Master): 노드와 노드간 통신을 도와주는 관제센터와 같은 역할

### 9 네트워크를 통한 원격 연동도 가능
- 서로 분리된 하드웨어 장치 안에서 각 노드들끼리 네트워크 연결을 통해 서로 통신하며 하나의 단일 시스템으로서 동작 가능

### 10 ROS 기반의 구현 사례
- 라이다 + 카메라 + 모터 + SW모듈1 + SW모듈2 (하드웨어 장치 x 3개, 소프트웨어 모듈 x 2개)
- 라이다와 카메라 정보를 상황인지SW가 분석한 후 결과를 운전판단SW(TensorFlow)로 전송
- 운전판단SW(Python)가 제어명령을 생성해 모터로 보내 차량을 움직이게 함
- 만약, 급제동SW가 필요하다면 노드를 새로 생성하고 필요한 정보를 다른 노드들에서 전달받으면 됨
- 각 HW의 기능 사용 방법은 제조사에서 제공된다.
- 참고 블로그: [레이더? 라이다? 비슷한 듯 다른 자율주행 핵심 기술](https://m.blog.naver.com/e_mobis/221979032096)

### 11 ROS에서 사용하는 기본 용어들
- 마스터(Master) 또는 ROS Core
    - 서로 다른 노드들 사이의 통신을 총괄 관리
    - 전체 시스템에 걸쳐서 딱 1개 존재
- 노드(Nodes)
    - 실행가능한 최소의 단위 또는 프로세스
    - ROS에서 발생하는 토픽(메시지)을 주고받는 통신의 주체
    - 하드웨어 장치 또는 소프트웨어 모듈에 각각 하나씩 할당
- 토픽(Topics)
    - ROS 노드들이 관심을 가지고 있는 이야깃거리
    - 그 안에 들어있는 실제 데이터를 메시지(Message)라고 부름
    - ex. 센서데이터, 카메라 이미지, 액츄에이터 제어명령, ...
- 발행자 노드(Publishers)
    - 특정 토픽에 메시지를 담아 외부로 송신하는 노드
    - 토픽(Topics)을 만들어 보내는 노드
    - ex. 정보수집센서, 카메라, 모터제어 알고리즘, ...
- 구독자 노드(Subscribers)
    - 특정 토픽에 담겨진 메시지를 수신하는 노드
    - 토픽(Topics)을 받는 노드
    - ex. 액츄에이터 제어기, 데이터 시각화 도구, 정보수집SW 모듈, ...
- 패키지(Packages)
    - 하나 이상의 노드와 노드의 실행을 위한 정보 등을 묶어 놓은 단위
    - 노드, 라이브러리, 데이터, 파라미터, 설정파일(configuration) 등을 포함

### 12 간단한 ROS 응용 예
- 하드웨어 제조사가 제공하는 ROS 노드들
    - 센서 (Publisher)
        - ex1. 온도센서 하드웨어 ---> 온도센서 노드 ---> "온도"(토픽)
        - ex2. 습도센서 하드웨어 ---> 습도센서 노드 ---> "습도"(토픽)
        - 각각 어느 토픽에 어떤 형태의 메시지를 발행하는지 정해져 있음
    - 액츄에이터 (Subscriber): 실제 움직이는 구동체
        - ex. "명령"(토픽) ---> 에어컨제어 노드 ---> 에어컨 액츄에이터 하드웨어
        - 어느 토픽의 어떤 메시지를 전달받으면 어떻게 동작하는지 정해져 있음
- ROS Core(마스터)가 이 노드들 사이의 메시지 통신을 관장
    - 온도센서 노드와 습도센서 노드는 주기적으로 각 토픽에 센싱 데이터를 넣어서 발생
    - **제어알고리즘 노드는 각 센서에서 수집된 데이터에 따라 제어결정을 내리고 명령을 발행**
    - 에어컨제어 노드는 명령 토픽을 구독하고 에어컨(HW) 제어신호를 생성

### 13 ROS 노드간 통신 기본 과정
1. 통신이 이루어지기 이전에, 통신을 원하는 노드는 마스터에게 의뢰하여 연결해야 하는 노드의 정보(주소)를 얻어오고 접속정보를 교환한다. ---> 각 노드간 메시지 통신이 가능
2. 통신환경 구축이 완료되고 나면, 노드간 통신은 마스터를 거치지 않고 직접 이루어진다. <--- 통신 행위에 마스터가 관여하지 않는다.

### 14 ROS 노드간 통신의 두 가지 방식
1. 토픽(topic) 방식의 통신: (자율주행 자동차에서 주로 사용하는 통신 방식)
    - 일방적이고 지속적인 메시지 전송
    - 1:1 뿐만 아니라 1:N 및 N:N 통신 가능
2. 서비스(service) 방식의 통신
    - 서버가 제공하는 서비스에 클라이언트가 요청을 보내고 응답을 받는 방식
    - 양방향 통신, 일회성 메시지 송수신

### 15 ROS 노드간 통신 시나리오
1. 마스터(roscore) 시동: 전체 통신 총괄, 통신 중재
    - 통신이 이루어지려면 우선은 `roscore`가 실행되고 있어야 함
    - 네트워크 통신을 해야하기 때문에, 마스터의 주소값이 공개되어야 함
        > XMLRPC: 서버  
        > http://ROS_MASTER_URI:11311  
        > 노드 정보 관리
2. 구독자(subscriber) 노드 구동
    - 특정 토픽(topic)에 발행되는 메시지를 수신하기를 요청
        > XMLRPC: 클라이언트  
        > http://ROS_HOSTNAME:1234  
        > 정보 구독
    - Subscriber 노드의 정보
        > /subscriber_node_name  
        > /topic_name  
        > message_type  
        > http://ROS_HOSTNAME:1234
3. 발행자(publisher) 노드 구동
    - 특정 토픽(topic) 메시지를 발행하겠다는 의사를 전달
        > XMLRPC: 클라이언트  
        > http://ROS_HOSTNAME:5678  
        > 정보 발행
    - Publisher 노드의 정보
        > /publisher_node_name  
        > /topic_name  
        > message_type  
        > http://ROS_HOSTNAME:5678
    - 자신이 제공하는 토픽을 필요로 하는 노드에게 전달해주라는 의미로 Master에게 자신의 topic 정보 전달
4. 노드 정보 전달: 마스터가 발행자 정보를 구독자에게 전달
5. 노드간 접속 요청: 구독자 노드가 발행자 노드에 TCPROS 접속을 요청
6. 노드간 접속 요청에 대한 응답: 발행자 노드가 자신의 TCPROS URI(포트 포함)를 전송하여 응답
    - ROS_HOSTNAME:3456 전송 : Subscriber에게 topic을 전송하기 위해 사용하는 포트 번호
    - Publisher의 http://ROS_HOSTNAME:5678는 마스터와 통신할때 사용하는 포트 번호
7. TCPROS 접속:
    - 발행자 노드와 구독자 노드 사이에 소켓(socket) 연결이 이루어짐
    - Publisher:
        > TCPROS: 서버  
        > ROS_HOSTNAME:3456  
        > **정보 발행**
    - Subscriber:
        > TCPROS: 클라이언트  
        > ROS_HOSTNAME:7890  
        > **정보 구독**
8. 메시지 전송:
    - 발행자 노드가 구독자 노드에게 메시지 전송(토픽)
    - 토픽 통신은 Publisher에서 Subscriber로 일방적으로 전송된다.
9. 메시지 전송 반복
    - 접속이 한번 이루어진 뒤에는 별도 절차 없이 지속적으로 메시지 송수신
    - 이후에는 각 노드간 통신에 마스터는 아무런 개입을 하지 않는다.
    - 하지만 마스터가 없어진다면 전체 시스템이 망가지므로 없애면 안된다.
