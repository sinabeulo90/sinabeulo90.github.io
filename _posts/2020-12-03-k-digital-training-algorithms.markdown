---
layout: post
title:  "알고리즘 참고 사항"
date:   2020-12-03
categories:
    - "K-Digital Training"
    - "Algorithms"
---

- 강의 중에 LinkedList를 직접 구현할 때, 노드의 추가 또는 삭제가 있을 때 간혹 전체 노드의 갯수를 추가하거나 뺴는 작업을 잊지 말자.

![트리의 용어](/assets/k-digital-training/tree.jpeg)


## 완전 이진 트리(Complete Binary Tree)

- 힙(Heap)을 사용하기 위한 조건이며, 배열로 표현될 수 있다.
- 루트 노드를 삭제할 경우 고려할 점:  
루트 노드의 키 값에 들어갈 자리를 크기가 바로 다음으로 큰 키 값을 가진 노드가 대신한다고 할때, 오른쪽 부분 트리에서 가장 작은 노드를 찾아가야 하는데, **이때 찾은 가장 작은 노드는 왼쪽 자식 노드가 존재하지 않는다**.  
이 노드를 새로운 루트 노드로 사용할 것이기 때문에, 오른쪽 노드가 존재하는지를 확인하고 이때 오른쪽 노드가 존재한다면 방금 찾은 가장 작은 노드는 루트 노드로 옮기고, 오른쪽 노드를 가장 작은 노드가 있던 자리로 오도록 한다.


## 힙(Heap), 우선 순위 큐(Priority Queue)

- 삽입 삭제 시간 복잡도: $O(\log n)$
- 힙 정렬의 알고리즘 시간 복잡도: $O(n \log n)$
